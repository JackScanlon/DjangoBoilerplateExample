version: '3'

services:
  web:
    container_name: web
    restart: always
    build:
      context: .
      dockerfile: ./Dockerfile
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - '8000:8000'
    env_file:
      ./env/app.compose.env
    volumes:
      - ./app/:/app/
      - staticfiles:/app/static/
      - mediafiles:/app/media/
    depends_on:
      - db
      - es
      - redis

  es:
    container_name: es
    restart: on-failure
    image: elasticsearch:7.8.1
    ports:
      - '9200:9200'
      - '9300:9300'
    env_file:
      ./env/es.compose.env
    volumes:
      - esdata:/usr/share/elasticsearch/data

  redis:
    container_name: redis
    hostname: redis
    image: redis

  celery:
    container_name: celery
    restart: on-failure
    build:
      context: .
    command: celery -A app worker -l INFO -Q queue1
    volumes:
      - ./app:/app
    env_file:
      ./env/app.compose.env
    depends_on:
      - db
      - redis
      - web

  db:
    container_name: db
    restart: on-failure
    image: postgres:14.4
    ports:
      - '5432:5432'
    env_file:
      ./env/db.compose.env
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  esdata:
  postgres_data:
  staticfiles:
  mediafiles: